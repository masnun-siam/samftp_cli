
import requests
from bs4 import BeautifulSoup
from urllib.parse import urljoin
import subprocess
from pyfzf.pyfzf import FzfPrompt


# Base URL

# Function to fetch HTML from a given URL
def fetch_html(fetch_url):
    response = requests.get(fetch_url)
    return response.content


# Function to parse the HTML and extract file and folder URLs
def parse_html(parse_url, response_html):
    soup = BeautifulSoup(response_html, 'html.parser')
    td_tags = soup.find_all('td', class_='fb-n')
    file_href = []
    folder_href = []
    for td_tag in td_tags:
        a_tags = td_tag.find_all('a')
        for a_tag in a_tags:
            value = a_tag.text
            href = a_tag['href']
            if href.startswith('..'):
                absolute_url = urljoin(parse_url, href[2:])
            else:
                absolute_url = urljoin(parse_url, href)
            if href.endswith(('.jpg', '.jpeg', '.png', '.gif', '.mp4', '.avi', '.mov', '.mkv')):
                file_href.append((value, absolute_url))
            else:
                folder_href.append((value, absolute_url))
    return folder_href, file_href

# Function to prompt the user for input and handle file and folder selection
def prompt_user(baseurl, folders, files):
    # clear screen
    while True:
        subprocess.run(['clear'])
        print("Select a value:")
        for index, (value, _) in enumerate(folders + files):
            # print(f"{index}. {value}")
            # print files and folders with different colors
            if index < len(folders):
                # print the first folder in red color
                if index == 0:
                    print("\033[1;31;40m{}. {}\033[0m".format(index, value))
                else:
                    print("\033[1;32;40m{}. {}\033[0m".format(index, value))
            else:
                # print("\033[1;34;40m{}. {}\033[0m".format(index, value))
                # print videos in blue color and images in yellow color
                if value.endswith(('.jpg', '.jpeg', '.png', '.gif')):
                    print("\033[1;33;40m{}. {}\033[0m".format(index, value))
                else:
                    print("\033[1;34;40m{}. {}\033[0m".format(index, value))

        choice = input("\nEnter your choice (0-{}, s to search, p to open as playlist, q to quit): ".format(len(folders + files) - 1))
        if choice.lower() == 'q':
            print("Exiting...")
            break


        if choice.lower() == 's':
            # spawn fzf and search
            fzf = FzfPrompt('/opt/homebrew/bin/fzf')
            choice = fzf.prompt([x[0] for x in folders + files])
            if not choice:
                print("No value selected. Please try again.")
                continue
            else:
                # get the index of the selected value 
                selected_index = [x[0] for x in folders + files].index(choice[0])
                choice = str(selected_index)
                
                #clear screen
                subprocess.run(['clear'])

        # if choice is p, open all videos in mpv as playlist
        if choice.lower() == 'p':
            # get all video files
            video_files = [x[1] for x in files if x[1].endswith(('.mp4', '.avi', '.mov', '.mkv'))]
            # open all video files in mpv
            print(video_files)
            subprocess.run(['mpv', '--playlist', *video_files])
            continue


        if not choice.isdigit() or int(choice) < 0 or int(choice) > len(folders + files) - 1:
            print("Invalid choice. Please try again.")
            continue
        # if choice is 0, remove the part after the last slash from other folder_urls
        if choice == '0':
            # get the second folder url, remove the part after the last slash and fetch html
            # replace the .. with previous folder
            if len(folders) > 1:
                href_path = folders[1][1].split('/')[0:-3]
                if len(href_path) == 3:
                    continue
                href_path = '/'.join(href_path)
                print(href_path)
                html_body = fetch_html(href_path)
            elif len(files) >= 1:
                href_path = files[0][1].split('/')[0:-2]
                if len(href_path) == 3:
                    continue
                href_path = '/'.join(href_path)
                print(href_path)
                html_body = fetch_html(href_path)
            else:
                html_body = fetch_html(baseurl)
            folders, files = parse_html(baseurl, html_body)

        else:
            selected_index = int(choice)
            selected_value, selected_href = folders[selected_index] if selected_index < len(folders) else \
            files[selected_index - len(folders)]

            if selected_href.endswith(('.jpg', '.jpeg', '.png', '.gif')):
                # print("Selected value represents an image.")
                # Handle image file
                subprocess.Popen(["mpv", "--loop-file=inf", selected_href], stdout=subprocess.PIPE,
                                 stderr=subprocess.PIPE)
            elif selected_href.endswith(('.mp4', '.avi', '.mov', '.mkv')):
                # print("Selected value represents a video.")
                # Open video file with mpv without showing logs
                # subprocess.Popen(["mpv", selected_href], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
                subprocess.run(['mpv', selected_href])
            else:
                # print("Selected value represents a folder.")
                html_body = fetch_html(selected_href)
                folders, files = parse_html(baseurl, html_body)


folders = [
    ['English Movies', 'http://172.16.50.7', "SAM-FTP-2/English%20Movies/"],
    ['Hindi Movies', 'http://172.16.50.9', "SAM-FTP-1/Hindi%20Movies/"],
    ['South Movies Hindi Dubbed', 'http://172.16.50.8', "SAM-FTP-1/SOUTH%20INDIAN%20MOVIES/Hindi%20Dubbed/"],
    ['Kolkata Bangla Movies', 'http://172.16.50.10', "SAM-FTP-3/Kolkata%20Bangla%20Movies/"],
    ['Animation Movies', 'http://172.16.50.10', "SAM-FTP-3/Animation%20Movies/"],
    ['Foreign Language Movies', 'http://172.16.50.7', "SAM-FTP-2/Foreign%20Language%20Movies/"],
    ['TV Series', 'http://172.16.50.12', "SAM-FTP-1/TV-WEB-Series/"],
    ['Korean TV and Web Series', 'http://172.16.50.9', "SAM-FTP-1/KOREAN%20TV%20%26%20WEB%20Series/"],
    ['Anime', 'http://172.16.50.10', "SAM-FTP-3/Anime%20%26%20Cartoon%20TV%20Series/"],
]


def start_prompt():
    print("Select a value:")
    for index, value in enumerate(folders):
        print("\033[1;32;40m{}. {}\033[0m".format(index + 1, value[0]))

    choice = input("\nEnter your choice (1-{}, q to quit): ".format(len(folders)))
    if choice.lower() == 'q':
        print("Exiting...")
        exit(0)

    if not choice.isdigit() or int(choice) < 0 or int(choice) > len(folders):
        print("Invalid choice. Please try again.")
        return start_prompt()

    else:
        return choice


if __name__ == "__main__":
    choice = start_prompt()

    selected_index = int(choice) - 1

    base_url = folders[selected_index][1]
    path = folders[selected_index][2]

    url = urljoin(base_url, path)

    # Fetch HTML from the URL
    html = fetch_html(url)

    # Parse the HTML and extract folder and file URLs
    folder_urls, file_urls = parse_html(base_url, html)

    # Prompt the user for input and handle folder and file selection
    prompt_user(base_url, folder_urls, file_urls)

